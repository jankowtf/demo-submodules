---
title: "Creating a Meta Repository with Git Submodules"
---

## Setting up a meta repository with submodules

In this tutorial, we'll create a meta repository that contains two Git submodules: `repo_01` and `repo_02`.

### Prerequisites

- Git installed on your system
- Basic knowledge of Git commands
- Two existing Git repositories to use as submodules (or we'll create them)

### Step 1: Create the meta repository

First, let's create a new directory for our meta repository and initialize it as a Git repository:

```bash
mkdir main_repo
cd main_repo
git init
```

### Step 2: Create repositories for submodules (if needed)

If you don't already have repositories to use as submodules, you can create them:

```bash
# Create the first repository
mkdir -p ../repo_01
cd ../repo_01
git init
echo "# Repository 01" > README.md
git add README.md
git commit -m "Initial commit for repo_01"

# Create the second repository
mkdir -p ../repo_02
cd ../repo_02
git init
echo "# Repository 02" > README.md
git add README.md
git commit -m "Initial commit for repo_02"

# Return to the meta repository
cd ../main_repo
```

::: {.callout-note}
In a real-world scenario, these repositories would typically be hosted on GitHub, GitLab, or another Git hosting service.
:::

### Step 3: Enable the file protocol (for local repositories only)

::: {.callout-important}
When adding local repositories as submodules (using relative or absolute file paths), you may encounter an error about the file transport protocol not being allowed. This is a security feature in Git.
:::

If you see an error like this:

```
fatal: transport 'file' not allowed
fatal: clone of '../repo_01' into submodule path 'repo_01' failed
```

You need to enable the file protocol by running:

```bash
git config --global protocol.file.allow always
```

This allows Git to use the file:// protocol to access local repositories. This setting is only needed for local submodules and can be reverted after you're done by running:

```bash
git config --global protocol.file.allow user
```

Or remove the setting entirely:

```bash
git config --global --unset protocol.file.allow
```

### Step 4: Add the submodules to the meta repository

Now, let's add the repositories as submodules:

```bash
# Add the first submodule
git submodule add ../repo_01 repo_01

# Add the second submodule
git submodule add ../repo_02 repo_02
```

This creates a `.gitmodules` file in your meta repository that tracks the submodule paths and URLs.

### Step 5: Commit the changes to the meta repository

```bash
git add .gitmodules repo_01 repo_02
git commit -m "Add repo_01 and repo_02 as submodules"
```

### Step 6: Verify the submodules

You can verify that the submodules were added correctly:

```bash
git submodule status
```

You should see output similar to:

```
 <commit-hash> repo_01 (heads/master)
 <commit-hash> repo_02 (heads/master)
```

### Understanding the .gitmodules file

The `.gitmodules` file contains the mapping between the submodule's URL and the local path. It should look something like this:

```
[submodule "repo_01"]
	path = repo_01
	url = ../repo_01
[submodule "repo_02"]
	path = repo_02
	url = ../repo_02
```

::: {.callout-important}
When using remote repositories, the URLs would be the full repository URLs, such as `https://github.com/username/repo_01.git`.
:::

### Preparing for GitHub (or other remote hosting)

If you plan to push your meta repository with submodules to GitHub or another remote host, you'll need to:

1. Create empty repositories on the hosting service for your main repo and each submodule
2. Update the submodule URLs in the `.gitmodules` file to point to the remote repositories:

```bash
git config -f .gitmodules submodule.repo_01.url https://github.com/jankowtf/repo_01.git
git config -f .gitmodules submodule.repo_02.url https://github.com/jankowtf/repo_02.git
git add .gitmodules
git commit -m "Update submodule URLs to remote repositories"
```

3. Push all repositories to their respective remotes:

```bash
# Push the main repository
git remote add origin https://github.com/jankowtf/main_repo.git
git push -u origin main

# Push the submodules
cd repo_01
git remote add origin https://github.com/jankowtf/repo_01.git
git push -u origin main
cd ../repo_02
git remote add origin https://github.com/jankowtf/repo_02.git
git push -u origin main
```

### Next steps

Now that you've created a meta repository with submodules, learn how to [manage and update them](managing_submodules.qmd). 